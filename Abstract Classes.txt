>In Java, abstract class is declared with the abstract keyword. It may have both abstract and non-abstract methods(methods with bodies).

> An abstract class is declared using the “abstract” keyword in its class definition.

>ex:
abstract class Shape 
{
    int color;
    // An abstract function
    abstract void draw();
}

1.An instance of an abstract class can not be created.

2.Constructors are allowed.

3.We can have an abstract class without any abstract method.

4.There can be a final method in abstract class but any abstract method in class(abstract class) can not be declared as final  or in simpler terms final method can not be abstract itself

5.We can define static methods in an abstract class

6.We can use the abstract keyword for declaring top-level classes (Outer class) as well as inner classes as abstract

7.If a class contains at least one abstract method then compulsory should declare a class as abstract 

8.If the Child class is unable to provide implementation to all abstract methods of the Parent class then we should declare that Child class as abstract so that the next level Child class should provide implementation to the remaining abstract method(imp)

10.You cannot instantiate the abstract Parent class directly.
Create a concrete subclass (like Child) that implements the abstract methods.
Instantiate the subclass instead, and you can access both abstract and normal methods from the Parent class.

Abstract class vs Interface:

Type of methods:
Interface can have only abstract methods.
Abstract class can have abstract and non-abstract methods. From Java 8, it can have default and static methods also.

Final Variables:
Variables declared in a Java interface are by default final.
An abstract class may contain non-final variables.

Type of variables:
Abstract class can have final, non-final, static and non-static variables.
Interface has only static and final variables.

Implementation:
Abstract class can provide the implementation of interface.
Interface can’t provide the implementation of abstract class.

Inheritance vs Abstraction:
A Java interface can be implemented using keyword “implements”
and abstract class can be extended using keyword “extends”.

Multiple implementation:
An interface can extend another Java interface only,
an abstract class can extend another Java class and implement multiple Java interfaces.

Accessibility of Data Members:
Members of a Java interface are public by default.
A Java abstract class can have class members like private, protected, etc.